# main.py

import pandas as pd
import matplotlib.pyplot as plt
import configparser

# Import all our custom agents
from src.data.data_manager import DataManager
from src.risk.risk_manager import RiskManager
from src.strategies.ma_crossover_strategy import MovingAverageCrossoverStrategy
from src.regime.regime_filter import RegimeFilter
from src.portfolio.portfolio_manager import PortfolioManager


def plot_results(results):
    """
    Plots the equity curve from the backtest results.
    """
    plt.figure(figsize=(12, 8))
    plt.plot(results['equity'])
    plt.title('Strategy Equity Curve')
    plt.xlabel('Date')
    plt.ylabel('Portfolio Value ($)')
    plt.grid(True)
    plt.show()


def main():
    """
    Main function to run the backtest.
    """
    # --- 1. Configuration ---
    config = configparser.ConfigParser()
    config.read('config.ini')

    DATA_FILE = 'data/BTC_USDT_1d.csv'
    INITIAL_CAPITAL = 100000.0

    # --- 2. Initialize Agents ---
    data_manager = DataManager()
    risk_manager = RiskManager()

    # For now, we only have one strategy, so we'll use it as the default
    strategies = {
        'default': MovingAverageCrossoverStrategy(short_window=50, long_window=200)
    }

    # We will not use the regime filter for this baseline run.
    regime_filter = None

    # --- 3. Load Data ---
    data = data_manager.load_data(DATA_FILE)
    if data.empty:
        print("Data could not be loaded. Exiting.")
        return

    # We need ATR for our risk manager, let's calculate it.
    high_low = data['high'] - data['low']
    high_close = abs(data['high'] - data['close'].shift())
    low_close = abs(data['low'] - data['close'].shift())
    ranges = pd.concat([high_low, high_close, low_close], axis=1)
    true_range = ranges.max(axis=1)
    data['atr'] = true_range.rolling(window=14).mean()
    data = data.dropna()  # Drop rows with NaN values from ATR calculation

    # --- 4. Run Backtest ---
    # main.py

# ... (keep all the code above this)

    data['atr'] = true_range.rolling(window=14).mean()
    data = data.dropna()  # Drop rows with NaN values from ATR calculation

    # --- Add this block for debugging ---
    print("\n--- Debugging Signals ---")
    # Manually run the strategy to see what signals it produces
    strategy_to_debug = strategies['default']
    debug_signals = strategy_to_debug.generate_signals(data)

    # Print a count of each unique signal value
    print("Signal values generated by the strategy:")
    print(debug_signals['signal'].value_counts())
    print("--- End of Debug Block ---\n")
    # --- End of debug block ---

    # --- 4. Run Backtest ---
    print("Initializing Portfolio Manager and running backtest...")
    portfolio_manager = PortfolioManager(
        data=data,
        strategies=strategies,
        risk_manager=risk_manager,
        regime_filter=regime_filter,
        initial_capital=INITIAL_CAPITAL,
        commission_pct=0.001 # <-- ADD THIS LINE
    )

    results = portfolio_manager.run_backtest()

    # --- 5. Analyze and Display Results ---
    final_equity=results['equity'].iloc[-1]
    total_return_pct=((final_equity / INITIAL_CAPITAL) - 1) * 100

    print("\n--- Backtest Finished ---")
    print(f"Initial Capital: ${INITIAL_CAPITAL:,.2f}")
    print(f"Final Equity:    ${final_equity:,.2f}")
    print(f"Total Return:    {total_return_pct:.2f}%")
    print("-------------------------")

    plot_results(results)


if __name__ == "__main__":
    main()
